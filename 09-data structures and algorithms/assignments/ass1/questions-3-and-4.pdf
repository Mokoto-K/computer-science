 y36jQuestion 3

a) For the best case:  

k = 1, therefore the outter loop would only run once as on the second iteration
we would have i = 1 which would be = to k and so we would be finished.

outter = 1

Now the inner loop will search from j (i + 1) to n times with the body running 
n - 1 times.

inner = n - 1 or simply n  

Finally all of the swapping we see occuring after the inner loop is all constant
so we can ignore it. This gives us a total time of 
T(n) = 1 + n, which is just n so we have O(n) complexity for the best case.


b) For the worst case:

k = n, therefore the outter for loop would run n + 1 times with the body of the 
loop running n times.

outter = n 

Now the inner loop runs the same as in the above questions, it will search from 
j (i + 1) to n times with the body running n - 1 times except that each time it 
will run 1 time less for each increase of i as j = i + 1 and i is increasing one 
step per loop, therefore we get the summation of (n-1) + (n-2) + (n-3) ... 1 =
n(n-1) / 2 (the sum of the first n natural numbers) this simplifies down to n^2 

inner = n^2

again we can forget the rest as it runs at constant time, therefore for the worst 
case we can see that:
T(n) = n^2 + n, we take the leading term and get O(n^2) for our worst case.


Question 4

Since the key is always found exactly in the middle of the array of n lenght 
(assuming an odd numbered array) we can say that:

i = (n + 1) / 2 

Xi = 1 if i 
     0 otherwise

The only position that has a probability of 1 is the middle and every other position 
has a probability of 0 therefore:

E[Xi] = 1 * (n + 1) / 2 
      = (n + 1) / 2 

This will always be the average number of cases (n + 1 / 2 comparisons) as the key 
is always found in the middle of the array. This translates to O(n) for an asymtotic 
analysis when we remove any constants.






